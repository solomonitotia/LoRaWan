#define GPS_ON        // GPS conectado. Si no está definido se envían datos nulos. Para uso con TTNMAPPER App móvil
#define DEBUG_ON      // Info por Serial
#define MODO_TEST     // Usa utiliza el canal 0 para transmitir ---- SOLO TEST
#define BAUD_SERIAL 115200
#include <SPI.h>
#include <lmic.h>
#include <hal/hal.h>
#ifdef GPS_ON
#include <SoftwareSerial.h>
#include <MicroNMEA.h>
#define RX_GPS 8
#define TX_GPS 9
#define BAUD_GPS 9600

// Refer to serial devices by use
HardwareSerial& console = Serial;
SoftwareSerial gps(RX_GPS, TX_GPS);

char nmeaBuffer[500];
MicroNMEA nmea(nmeaBuffer, sizeof(nmeaBuffer));
#endif GPS_ON

static const PROGMEM u1_t NWKSKEY[16] = { 0x0F, 0x26, 0xAC, 0xD7, 0xD6, 0xC2, 0xFC, 0xC2, 0xB7, 0x5F, 0x25, 0x34, 0x8A, 0xEC, 0x99, 0xC8 };

static const u1_t PROGMEM APPSKEY[16] = { 0x62, 0x1C, 0xF2, 0x6E, 0x4B, 0xAA, 0x82, 0xE8, 0x99, 0x8E, 0xCC, 0xA3, 0x2A, 0xC1, 0x24, 0xF8 };

// LoRaWAN end-device address (DevAddr)
static const u4_t DEVADDR = 0x260B63AE; // <-- Change this address for every node!
void os_getArtEui (u1_t* buf) { }
void os_getDevEui (u1_t* buf) { }
void os_getDevKey (u1_t* buf) { }


static uint8_t payload[13];
static osjob_t sendjob;

// Planificacion del envio de paquetes LoRa. El intervalo es en segundos
const unsigned TX_INTERVAL = 20;


// Pin mapping
const lmic_pinmap lmic_pins = {
  .nss = 10,
  .rxtx = LMIC_UNUSED_PIN,
  .rst = 4,
  .dio = {2, 3, 7},
};


//************ Gestion de enventos del módulo LoRa RFM95W
void onEvent (ev_t ev) {
  Serial.print(os_getTime());
  Serial.print(": ");
  switch (ev) {
    case EV_SCAN_TIMEOUT:
      Serial.println(F("EV_SCAN_TIMEOUT"));
      break;
    case EV_BEACON_FOUND:
      Serial.println(F("EV_BEACON_FOUND"));
      break;
    case EV_BEACON_MISSED:
      Serial.println(F("EV_BEACON_MISSED"));
      break;
    case EV_BEACON_TRACKED:
      Serial.println(F("EV_BEACON_TRACKED"));
      break;
    case EV_JOINING:
      Serial.println(F("EV_JOINING"));
      break;
    case EV_JOINED:
      Serial.println(F("EV_JOINED"));
      break;
    case EV_RFU1:
      Serial.println(F("EV_RFU1"));
      break;
    case EV_JOIN_FAILED:
      Serial.println(F("EV_JOIN_FAILED"));
      break;
    case EV_REJOIN_FAILED:
      Serial.println(F("EV_REJOIN_FAILED"));
      break;
    case EV_TXCOMPLETE:
      Serial.println(F("EV_TXCOMPLETE (includes waiting for RX windows)"));
      if (LMIC.txrxFlags & TXRX_ACK)
        Serial.println(F("Received ack"));
      if (LMIC.dataLen) {
        Serial.println(F("Received "));
        Serial.println(LMIC.dataLen);
        Serial.println(F(" bytes of payload"));
      }
      // Schedule next transmission
      os_setTimedCallback(&sendjob, os_getTime() + sec2osticks(TX_INTERVAL), send_GPS_data);
      break;
    case EV_LOST_TSYNC:
      Serial.println(F("EV_LOST_TSYNC"));
      break;
    case EV_RESET:
      Serial.println(F("EV_RESET"));
      break;
    case EV_RXCOMPLETE:
      // data received in ping slot
      Serial.println(F("EV_RXCOMPLETE"));
      break;
    case EV_LINK_DEAD:
      Serial.println(F("EV_LINK_DEAD"));
      break;
    case EV_LINK_ALIVE:
      Serial.println(F("EV_LINK_ALIVE"));
      break;
    default:
      Serial.println(F("Unknown event"));
      break;
  }
}



// ----------------------------
// Capture and send GPS data -----------------------------
// ----------------------------
void send_GPS_data(osjob_t* j) {
  boolean datos_gps = false;
  char c_gps;

  // GPS --- lat/lon
  long latitude_long = 0;
  long longitude_long = 0;

  // GPS --- Altitud
  long alt = 0;
  word altitude = 0;

  // GPS --- HDOP (horizontal dilution of precision)
  byte hdop = 0;

  // GPS --- Numero de satélites
  byte sats = 0;
#ifdef DEBUG_ON
  Serial.println(F("JOB for GPS data"));
#endif DEBUG_ON

#ifdef GPS_ON
  // Check if there is not a current TX/RX job running
  if (LMIC.opmode & OP_TXRXPEND) {
    Serial.println(F("OP_TXRXPEND"));
    Serial.println(OP_TXRXPEND);
    Serial.println(LMIC.opmode);
    Serial.println("---------------");
  } else {
    // Prepare upstream data transmission at the next possible time.
    // Empty input buffer
    while (gps.available()) {
      gps.read();
    }
    delay(500);

    nmea.clear();

    Serial.println("WE READ NEW GPS DATA");
    while (!(nmea.isValid())) {
      while (gps.available()) {
        c_gps = gps.read();
#ifdef DEBUG_ON
        console.print(c_gps);
#endif DEBUG_ON
        nmea.process(c_gps);
      }
    }
#ifdef DEBUG_ON
    Serial.print("================================ NAV SYSTEM: ");
    Serial.println(nmea.getNavSystem());
#endif DEBUG_ON

    if ((nmea.isValid()) & (nmea.getNavSystem() != "\0")) {
      // ----- MicroNMEA returns the info without decimals
      // therefore we save the next step of passing it to integer
      // multiplying by 10000000
      // I leave the commented code in case someone needs it
      // ----------------------------
      //float latitude = nmea.getLatitude();
      //float longitude = nmea.getLongitude();
      //long latitude_long = latitude * 10000000;
      //long longitude_long = longitude * 10000000;

      // GPS --- Latitud + Longitud
      latitude_long = nmea.getLatitude();
      longitude_long = nmea.getLongitude();

      // GPS --- Altitud
      altitude = 0;
      if (nmea.getAltitude(alt)) {   // Altitud correcta??
        altitude = alt / 1000;
      }
      hdop = nmea.getHDOP();
      sats = nmea.getNumSatellites();

      // [0..3] 4 bytes LATITUDE
      payload[0] = (byte) ((latitude_long & 0xFF000000) >> 24 );
      payload[1] = (byte) ((latitude_long & 0x00FF0000) >> 16 );
      payload[2] = (byte) ((latitude_long & 0x0000FF00) >> 8 );
      payload[3] = (byte) ((latitude_long & 0X000000FF));

      // [4..7] 4 bytes LONGITUDE
      payload[4] = (byte) ((longitude_long & 0xFF000000) >> 24 );
      payload[5] = (byte) ((longitude_long & 0x00FF0000) >> 16 );
      payload[6] = (byte) ((longitude_long & 0x0000FF00) >> 8 );
      payload[7] = (byte) ((longitude_long & 0X000000FF));

      // [8..9] 2 bytes ALTITUDE
      payload[8] = (byte) ((altitude & 0xFF00) >> 8);
      payload[9] = (byte) (altitude & 0x00FF);

      // [10] 1 byte HDOP
      payload[10] = (byte) hdop;  //HDOP

      // [11] 1 byte SATELLITES
      payload[11] = (byte) sats; //Satelites

#ifdef DEBUG_ON
      Serial.println(F("GPS data collected ------"));
      Serial.print(F("latitude: ")); Serial.println(latitude_long);
      Serial.print(F("longitude: ")); Serial.println(longitude_long);
      Serial.print(F("altitude: ")); Serial.println(altitude);
      Serial.print(F("hdop: ")); Serial.println(hdop);
      Serial.print(F("sats: ")); Serial.println(sats);
      Serial.println(F("-----------------"));
#endif DEBUG_ON

      datos_gps = true;
    }
    else {
#ifdef DEBUG_ON
      Serial.println(F("NMEA not VALID"));
#endif DEBUG_ON
    }
    if (datos_gps) {
#ifdef DEBUG_ON
      Serial.print(F("...sent LoRaWAN GPS data. Pack size: "));
      Serial.println(sizeof(payload) - 1);
#endif DEBUG_ON
      LMIC_setTxData2(1, payload, sizeof(payload) - 1, 0);
    }
  }
  os_setTimedCallback(&sendjob, os_getTime() + sec2osticks(TX_INTERVAL), send_GPS_data);
#endif GPS_ON

#ifndef GPS_ON
  if (LMIC.opmode & OP_TXRXPEND) {
    Serial.println(F("OP_TXRXPEND"));
    Serial.println(OP_TXRXPEND);
    Serial.println(LMIC.opmode);
    Serial.println("---------------");
  } else {
    // Prepare upstream data transmission at the next possible time.
#ifdef DEBUG_ON
    Serial.println(F("sending empty package for TTNMapper with mobile app"));
#endif DEBUG_ON
    LMIC_setTxData2(1, payload, sizeof(payload) - 1, 0);
    os_setTimedCallback(&sendjob, os_getTime() + sec2osticks(TX_INTERVAL), send_GPS_data);
  }
#endif GPS_ON

}
void forceTxSingleChannelDr(int channel, int dr) {
  for (int i = 0; i < 9; i++) { // For EU; for US use i<71
    if (i != channel) {
      LMIC_disableChannel(i);
    }
  }
  LMIC_setDrTxpow(dr, 14);
}
void inicializar_LoRa() {
  os_init();
  LMIC_reset();
#ifdef PROGMEM
  uint8_t appskey[sizeof(APPSKEY)];
  uint8_t nwkskey[sizeof(NWKSKEY)];
  memcpy_P(appskey, APPSKEY, sizeof(APPSKEY));
  memcpy_P(nwkskey, NWKSKEY, sizeof(NWKSKEY));
  LMIC_setSession (0x1, DEVADDR, nwkskey, appskey);
#else
  LMIC_setSession (0x1, DEVADDR, NWKSKEY, APPSKEY);
#endif
#if defined(CFG_eu868)
  LMIC_setupChannel(0, 868100000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
  LMIC_setupChannel(1, 868300000, DR_RANGE_MAP(DR_SF12, DR_SF7B), BAND_CENTI);      // g-band
  LMIC_setupChannel(2, 868500000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
  LMIC_setupChannel(3, 867100000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
  LMIC_setupChannel(4, 867300000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
  LMIC_setupChannel(5, 867500000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
  LMIC_setupChannel(6, 867700000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
  LMIC_setupChannel(7, 867900000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
  LMIC_setupChannel(8, 868800000, DR_RANGE_MAP(DR_FSK,  DR_FSK),  BAND_MILLI);      // g2-band
#elif defined(CFG_us915)
  LMIC_selectSubBand(1);
#endif
  LMIC_setLinkCheckMode(0);
  LMIC.dn2Dr = DR_SF9;
  LMIC_setDrTxpow(DR_SF7, 14);
#ifdef MODO_TEST
  forceTxSingleChannelDr(0, DR_SF7);
#endif MODO_TEST
  LMIC_setClockError(MAX_CLOCK_ERROR * 1 / 100);
  send_GPS_data(&sendjob);
}
void setup() {
  Serial.begin(BAUD_SERIAL);
  Serial.println(F("Starting"));
#ifdef GPS_ON
  gps.begin(BAUD_GPS);        // gps
#endif GPS_ON
  inicializar_LoRa();
}
void loop() {
  os_runloop_once();
}













//////////////////////////////////////////////////////////////////////////////////////////
// DECODER /////////// V3 SIDE //////////////////////////////////////////////////////////
/*function Decoder(bytes, port) {
  // Decode an uplink message from a buffer
  // (array) of bytes to an object of fields.
var decoded = {};

lat_decode = ((bytes[0]) << 24)
+ ((bytes[1]) << 16)
+ ((bytes[2]) << 8)
+ ((bytes[3]));

lon_decode = ((bytes[4]) << 24)
+ ((bytes[5]) << 16)
+ ((bytes[6]) << 8)
+ ((bytes[7]));

decoded.latitude = lat_decode / 1000000;
decoded.longitude = lon_decode / 1000000;

decoded.altitude = ((bytes[8]) << 8) + ((bytes[9]));
decoded.hdop = bytes[10] / 10;
decoded.sats = bytes[11];

return decoded;
*/
}

/////////////////////////////////////////////////////////////////////////////////
